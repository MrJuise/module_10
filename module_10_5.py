'''
Цель: понять разницу между линейным и многопроцессным подходом, выполнив операции обоими способами.

Задача "Многопроцессное считывание":
Необходимо считать информацию из нескольких файлов одновременно, используя многопроцессный подход.
Подготовка:
Скачайте архив с файлами для считывания данных и распакуйте его в проект для дальнейшего использования.
Выполнение:
Создайте функцию read_info(name), где name - название файла. Функция должна:

    Создавать локальный список all_data.
    Открывать файл name для чтения.
    Считывать информацию построчно (readline), пока считанная строка не окажется пустой.
    Во время считывания добавлять каждую строку в список all_data.

Этих операций достаточно, чтобы рассмотреть преимущество многопроцессного выполнения программы над линейным.

    Создайте список названий файлов в соответствии с названиями файлов архива.
    Вызовите функцию read_info для каждого файла по очереди (линейно) и измерьте время выполнения и выведите его в консоль.
    Вызовите функцию read_info для каждого файла, используя многопроцессный подход: контекстный менеджер with и объект Pool.
     Для вызова функции используйте метод map, передав в него функцию read_info и список названий файлов.
     Измерьте время выполнения и выведите его в консоль.

Для избежания некорректного вывода запускайте линейный вызов и многопроцессный по отдельности, предварительно закомментировав другой.

'''
import multiprocessing
import time

def read_info(name):
    all_data = []
    with open(name, 'r') as file:
        while True:
            line = file.readline()
            all_data.append(line)
            if not line:
                break


files = [f'./file {num}.txt' for num in range(1, 5)]

start_time = time.time()
for file in files:
    read_info(file)
end_time = time.time()
print(f'{end_time - start_time:.2f}')
#             Время работы - 4.03 сек

if __name__ == '__main__':
    with multiprocessing.Pool(processes=8) as pool:
        start_time_1 = time.time()
        pool.map(read_info, files)
        end_time_1 = time.time()
        print(f'{end_time_1 - start_time_1:.2f}')
#             время работы - 1.51 сек













